[["index.html", "UCSCXenaShiny v2 Book About", " UCSCXenaShiny v2 Book Shensuo Li, Shixiang Wang 2024-03-10 About UCSCXenaShiny is an R package for interactively exploring UCSC Xena datasets. It is mainly designed to provide a web app (built on the top of {shiny} framework and {UCSCXenaTools} package) for downloading, analyzing and visualizing datasets from UCSC Xena. In the latest version, the application can support both general and personalized tumor molecular analysis with versatile functional modules and user-friendly interface layouts. Overall, our tool aims to make best use of public omics data from UCSC Xena and bridge the gap between precision oncology research and broad user community. Here, we have prepared the tutorial book to introduce the detailed usage of UCSCXenaShiny. Firstly, we will start with the basic knowledge of UCSC Xena repository, as well as TPC projects (TCGA, PCAWG, CCLE) in chapter 1. Then, the following chapters can be generally divided into two parts for the usage of R package and Shiny App: Part Ⅰ Chapter 2：The ways to install UCSCXenaShiny package. Chapter 3：Avalilable built-in datasets of package, e.g. clinical or survival data. Chapter 4：The functions to query molecular data of TPC datasets. Chapter 5：The functions to perform various analyses based on TPC datasets. Part Ⅱ Chapter 6：The ways to visit UCSCXenaShiny application. Chapter 7：The intuitive widgets and quick exploration modules in homepage. Chapter 8：The query for all datasets of UCSC Xena repository. Chapter 9：General analysis modules for any matrix datasets. Chapter 10：Custom analysis modules for TPC datasets. Chapter 11：The key preprocesses of personalized TPC pipelines. Chapter 12：The versatile analyses of personalized TPC pipelines. Chapter 13：Two download modules for the custom data subset. Welcome to cite the following articles when UCSCXenaShiny has facilitated your study: UCSCXenaTools — Wang S and Liu X. The UCSCXenaTools R package: a toolkit for accessing genomics data from UCSC Xena platform, from cancer multi-omics to single-cell RNA-seq. Journal of Open Source Software. 2019;4 40:1627. UCSCXenaShiny v1 — Wang S, Xiong Y, Zhao L, Gu K, Li Y, Zhao F, et al. UCSCXenaShiny: an R/CRAN package for interactive analysis of UCSC Xena data. Bioinformatics. 2022;38 2:527-9. doi:10.1093/bioinformatics/btab561. UCSCXenaShiny v2 — Li S, et al. UCSCXenaShiny v2: Facilitating Integrative and Personalized Oncology Omics Analysis. 2024 (In preparation) If you have any question, please report to the Github issues page or email to lishensuo@163.com "],["background.html", "Chapter 1 Background 1.1 UCSC Xena 1.2 TCGA/PCAWG/CCLE 1.3 Other integrated data", " Chapter 1 Background 1.1 UCSC Xena 1.2 TCGA/PCAWG/CCLE 1.3 Other integrated data "],["install.html", "Chapter 2 Install", " Chapter 2 Install How to install and use this package library(UCSCXenaShiny) "],["built-in-datasets.html", "Chapter 3 Built-in datasets 3.1 TCGA 3.2 PCAWG 3.3 CCLE 3.4 Zenodo", " Chapter 3 Built-in datasets Figure 3.1: UCSCXenaShiny built-in datasets Non-omics supplementary tumor data for extensive analysis. 3.1 TCGA TCGA.organ: Detailed information of 33 TCGA projects head(TCGA.organ) ## TCGA Detail organ ## 1 BRCA breast invasive carcinoma breast ## 2 PRAD prostate adenocarcinoma prostate ## 3 OV ovarian serous cystadenocarcinoma ovary ## 4 PCPG pheochromocytoma &amp; paraganglioma ## 5 GBM glioblastoma multiforme brain ## 6 HNSC head &amp; neck squamous cell carcinoma tcga_gtex: Merged information of TCGA and GTEx samples head(tcga_gtex) ## sample tissue type type2 ## 1 TCGA-D3-A1QA-07 SKCM SKCM_tumor_TCGA tumor ## 2 TCGA-DE-A4MD-06 THCA THCA_tumor_TCGA tumor ## 3 TCGA-J8-A3O2-06 THCA THCA_tumor_TCGA tumor ## 4 TCGA-J8-A3YH-06 THCA THCA_tumor_TCGA tumor ## 5 TCGA-EM-A2P1-06 THCA THCA_tumor_TCGA tumor ## 6 TCGA-J8-A4HW-06 THCA THCA_tumor_TCGA tumor tcga_clinical: Common phenotypes of TCGA samples tcga_clinical_fine: Basic phenotypes of TCGA samples head(tcga_clinical_fine) ## # A tibble: 6 × 8 ## Sample Cancer Age Code Gender Stage_ajcc Stage_clinical Grade ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 TCGA-OR-A5J1-01 ACC 58 TP MALE Stage II &lt;NA&gt; &lt;NA&gt; ## 2 TCGA-OR-A5J2-01 ACC 44 TP FEMALE Stage IV &lt;NA&gt; &lt;NA&gt; ## 3 TCGA-OR-A5J3-01 ACC 23 TP FEMALE Stage III &lt;NA&gt; &lt;NA&gt; ## 4 TCGA-OR-A5J4-01 ACC 23 TP FEMALE Stage IV &lt;NA&gt; &lt;NA&gt; ## 5 TCGA-OR-A5J5-01 ACC 30 TP MALE Stage III &lt;NA&gt; &lt;NA&gt; ## 6 TCGA-OR-A5J6-01 ACC 29 TP FEMALE Stage II &lt;NA&gt; &lt;NA&gt; tcga_surv: Survival data of TCGA samples head(tcga_surv) ## sample OS OS.time DSS DSS.time DFI DFI.time PFI PFI.time ## 1 TCGA-OR-A5J1-01 1 1355 1 1355 1 754 1 754 ## 2 TCGA-OR-A5J2-01 1 1677 1 1677 NA NA 1 289 ## 3 TCGA-OR-A5J3-01 0 2091 0 2091 1 53 1 53 ## 4 TCGA-OR-A5J5-01 1 365 1 365 NA NA 1 50 ## 5 TCGA-OR-A5J6-01 0 2703 0 2703 0 2703 0 2703 ## 6 TCGA-OR-A5J7-01 1 490 1 490 NA NA 1 162 tcga_subtypes: Subtype information of TCGA samples head(tcga_subtypes) ## sampleID Subtype_mRNA Subtype_DNAmeth Subtype_protein Subtype_miRNA ## 1 TCGA-02-0001-01 LGr4 LGm5 &lt;NA&gt; &lt;NA&gt; ## 2 TCGA-02-0003-01 LGr4 LGm5 K1 &lt;NA&gt; ## 3 TCGA-02-0004-01 LGr4 &lt;NA&gt; K1 &lt;NA&gt; ## 4 TCGA-02-0006-01 &lt;NA&gt; LGm5 &lt;NA&gt; &lt;NA&gt; ## 5 TCGA-02-0007-01 unclassified LGm4 &lt;NA&gt; &lt;NA&gt; ## 6 TCGA-02-0009-01 LGr4 LGm4 &lt;NA&gt; &lt;NA&gt; ## Subtype_CNA Subtype_Integrative Subtype_other Subtype_Selected ## 1 &lt;NA&gt; &lt;NA&gt; Mesenchymal-like GBM_LGG.Mesenchymal-like ## 2 &lt;NA&gt; &lt;NA&gt; Mesenchymal-like GBM_LGG.Mesenchymal-like ## 3 &lt;NA&gt; &lt;NA&gt; &lt;NA&gt; GBM_LGG.NA ## 4 &lt;NA&gt; &lt;NA&gt; Mesenchymal-like GBM_LGG.Mesenchymal-like ## 5 &lt;NA&gt; &lt;NA&gt; Classic-like GBM_LGG.Classic-like ## 6 &lt;NA&gt; &lt;NA&gt; Classic-like GBM_LGG.Classic-like ## Subtype_Immune_Model_Based ## 1 &lt;NA&gt; ## 2 &lt;NA&gt; ## 3 &lt;NA&gt; ## 4 &lt;NA&gt; ## 5 &lt;NA&gt; ## 6 &lt;NA&gt; tcga_purity: tumor purity related information of TCGA samples head(tcga_purity) ## # A tibble: 6 × 7 ## sample cancer_type ESTIMATE ABSOLUTE LUMP IHC CPE ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 TCGA-OR-A5J1-01 ACC 0.937 NaN 0.977 0.8 0.925 ## 2 TCGA-OR-A5J2-01 ACC 0.918 NaN 0.617 0.95 0.898 ## 3 TCGA-OR-A5J3-01 ACC 0.967 NaN 0.925 0.8 0.947 ## 4 TCGA-OR-A5J4-01 ACC NaN NaN 0.920 0.8 0.866 ## 5 TCGA-OR-A5J5-01 ACC 0.976 NaN 1 0.8 0.978 ## 6 TCGA-OR-A5J6-01 ACC 0.874 NaN 0.744 0.88 0.840 tcga_genome_instability: tumor genome instability related information of TCGA samples head(tcga_genome_instability) ## sample purity ploidy Genome_doublings Cancer_DNA_fraction ## 1 TCGA-OR-A5J1-01 0.90 2.00 0 0.90 ## 2 TCGA-OR-A5J2-01 0.89 1.30 0 0.84 ## 3 TCGA-OR-A5J3-01 0.93 1.27 0 0.89 ## 4 TCGA-OR-A5J4-01 0.87 2.60 1 0.89 ## 5 TCGA-OR-A5J5-01 0.93 2.79 1 0.95 ## 6 TCGA-OR-A5J6-01 0.69 3.34 1 0.79 ## Subclonal_genome_fraction ## 1 0.02 ## 2 0.16 ## 3 0.11 ## 4 0.08 ## 5 0.15 ## 6 0.06 3.2 PCAWG pcawg_info: Common phenotypes of TCGA samples pcawg_info_fine: Basic phenotypes of TCGA samples head(pcawg_info_fine) ## # A tibble: 6 × 5 ## Sample Project Age Gender Type ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; ## 1 SP1003 BLCA-US 53 female tumor ## 2 SP1007 BLCA-US 53 female normal ## 3 SP10084 BRCA-US 64 female tumor ## 4 SP1009 BLCA-US 84 male tumor ## 5 SP10150 BRCA-US 48 female tumor ## 6 SP101515 OV-AU 54 female tumor pcawg_purity: tumor purity related information of PCAWG samples head(pcawg_purity) ## # A tibble: 6 × 6 ## icgc_specimen_id purity ploidy purity_conf_mad wgd_status wgd_uncertain ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;chr&gt; &lt;lgl&gt; ## 1 SP101724 0.885 3.36 0.039 wgd FALSE ## 2 SP79365 0.774 2.00 0.022 no_wgd FALSE ## 3 SP98853 0.8 2.43 0.011 no_wgd FALSE ## 4 SP47708 0.837 1.83 0.03 no_wgd FALSE ## 5 SP106808 0.92 1.64 0.003 no_wgd FALSE ## 6 SP102816 0.596 1.97 0.006 no_wgd FALSE 3.3 CCLE ccle_info: Common phenotypes of CCLE samples ccle_info_fine: Basic phenotypes of CCLE samples head(ccle_info_fine) ## # A tibble: 6 × 5 ## Sample Site_Primary Gender Histology Type ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 1321N1_CENTRAL_NERVOUS_SYSTEM central_nervous_system &quot;M&quot; glioma astr… ## 2 143B_BONE bone &quot;F&quot; osteosarcoma oste… ## 3 22RV1_PROSTATE prostate &quot;M&quot; carcinoma carc… ## 4 2313287_STOMACH stomach &quot;M&quot; carcinoma aden… ## 5 253JBV_URINARY_TRACT urinary_tract &quot;U&quot; carcinoma tran… ## 6 253J_URINARY_TRACT urinary_tract &quot;&quot; carcinoma tran… ccle_absolute: supplementary information of CCLE samples head(ccle_absolute) ## # A tibble: 6 × 5 ## `Cell Line` Lineage Purity Ploidy `Genome Doublings` ## &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 SKNSH_AUTONOMIC_GANGLIA AUTONOMIC 0.99 2.08 0 ## 2 KPNRTBM1_AUTONOMIC_GANGLIA AUTONOMIC 1 1.99 0 ## 3 MHHNB11_AUTONOMIC_GANGLIA AUTONOMIC 1 2.16 0 ## 4 NH6_AUTONOMIC_GANGLIA AUTONOMIC 1 2.02 0 ## 5 IMR32_AUTONOMIC_GANGLIA AUTONOMIC 0.99 2.21 0 ## 6 KPNYN_AUTONOMIC_GANGLIA AUTONOMIC 1 1.97 0 3.4 Zenodo Files with large amounts of data are uploaded to Zenodo. They can be loaded via load_data() function. 3.4.1 tumor infiltration estimations # TCGA samples dat1 = load_data(&quot;tcga_TIL&quot;) # PCAWG samples dat2 = load_data(&quot;pcawg_TIL&quot;) dat1[1:4,1:4] ## # A tibble: 4 × 4 ## cell_type `B cell_TIMER` `T cell CD4+_TIMER` `T cell CD8+_TIMER` ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 TCGA-OR-A5J1-01 0.108 0.117 0.201 ## 2 TCGA-OR-A5J2-01 0.114 0.107 0.213 ## 3 TCGA-OR-A5J3-01 0.102 0.106 0.203 ## 4 TCGA-OR-A5J5-01 0.102 0.111 0.196 3.4.2 ssGSEA pathway activities # TCGA samples dat1 = load_data(&quot;tcga_PW&quot;) # PCAWG samples dat2 = load_data(&quot;pcawg_PW&quot;) dat1[1:4,1:4] ## HALLMARK_ADIPOGENESIS HALLMARK_ALLOGRAFT_REJECTION ## TCGA-19-1787-01 0.2857295 0.14104371 ## TCGA-S9-A7J2-01 0.2591440 0.03655175 ## TCGA-G3-A3CH-11 0.3303460 0.18602627 ## TCGA-B5-A5OE-01 0.2692051 0.11716217 ## HALLMARK_ANDROGEN_RESPONSE HALLMARK_ANGIOGENESIS ## TCGA-19-1787-01 0.2178818 0.16112190 ## TCGA-S9-A7J2-01 0.1826316 0.08244577 ## TCGA-G3-A3CH-11 0.2563853 0.15919124 ## TCGA-B5-A5OE-01 0.1832165 0.15148992 3.4.3 other TCGA annotations “tcga_stemness”: tumor stemness of TCGA samples head(load_data(&quot;tcga_stemness&quot;)) ## sample RNAss EREG.EXPss DNAss EREG-METHss DMPss ENHss ## 1 TCGA-02-0047-01 0.2398426 0.5585645 NA NA NA NA ## 2 TCGA-02-0055-01 0.1878304 0.5743873 NA NA NA NA ## 3 TCGA-02-2483-01 0.4087490 0.7067001 NA NA NA NA ## 4 TCGA-02-2485-01 0.3491451 0.5659132 NA NA NA NA ## 5 TCGA-02-2486-01 0.2498411 0.4618031 NA NA NA NA ## 6 TCGA-04-1348-01 0.5741474 0.4998114 NA NA NA NA “tcga_tmb”: tumor mutation burden of TCGA samples head(load_data(&quot;tcga_tmb&quot;)) ## Cohort Patient_ID Tumor_Sample_ID Silent_per_Mb Non_silent_per_Mb ## 1 ACC TCGA-OR-A5JR TCGA-OR-A5JR-01 0.05168695 0.05168695 ## 2 ACC TCGA-OR-A5JH TCGA-OR-A5JH-01 0.10244018 0.15366028 ## 3 ACC TCGA-OR-A5JQ TCGA-OR-A5JQ-01 0.08117102 0.16234204 ## 4 ACC TCGA-OR-A5L9 TCGA-OR-A5L9-01 0.05354531 0.16063592 ## 5 ACC TCGA-OR-A5LA TCGA-OR-A5LA-01 0.05456403 0.19097410 ## 6 ACC TCGA-OR-A5LH TCGA-OR-A5LH-01 0.02618618 0.20948946 3.4.4 identifier repository Compile available identifiers of data for each of TPC databases. “pancan_identifier_help”: TCGA samples Figure 3.2: TCGA related identifiers tcga_ids = load_data(&quot;pancan_identifier_help&quot;) names(tcga_ids) # [1] &quot;id_molecule&quot; &quot;id_tumor_index&quot; &quot;id_TIL&quot; &quot;id_PW&quot; head(tcga_ids$id_molecule$id_gene) # the key identifier is ususally under &quot;Level3&quot; column ## Level2 Level3 Ensembl chrom chromStart chromEnd ## 1 mRNA Expression DDX11L1 ENSG00000223972.5 chr1 11869 14409 ## 2 mRNA Expression WASH7P ENSG00000227232.5 chr1 14404 29570 ## 3 mRNA Expression MIR6859-1 ENSG00000278267.1 chr1 17369 17436 ## 4 mRNA Expression RP11-34P13.3 ENSG00000243485.3 chr1 29554 31109 ## 5 mRNA Expression MIR1302-2 ENSG00000274890.1 chr1 30366 30503 ## 6 mRNA Expression FAM138A ENSG00000237613.2 chr1 34554 36081 ## strand ## 1 + ## 2 - ## 3 - ## 4 + ## 5 + ## 6 - “pcawg_identifier”: PCAWG samples “ccle_identifier”: CCLE samples Figure 3.3: PCAWG/CCLE molecular identifiers pcawg_ids = load_data(&quot;pcawg_identifier&quot;) names(pcawg_ids) # [1] &quot;id_gene&quot; &quot;id_pro&quot; &quot;id_fusion&quot; &quot;id_mi&quot; &quot;id_maf&quot; head(pcawg_ids$id_pro) # the key identifier is ususally under &quot;Level3&quot; column ## Level2 Level3 gene chrom chromStart chromEnd strand ## 1 Promoter activity prmtr.1 TSPAN6 chrX 99891803 99891803 - ## 2 Promoter activity prmtr.3 TNMD chrX 99839799 99839799 + ## 3 Promoter activity prmtr.6 DPM1 chr20 49575087 49575087 - ## 4 Promoter activity prmtr.7 SCYL3 chr1 169858029 169858029 - ## 5 Promoter activity prmtr.8 SCYL3 chr1 169863093 169863093 - ## 6 Promoter activity prmtr.9 SCYL3 chr1 169863408 169863408 - "],["molecular-data-query.html", "Chapter 4 Molecular data query 4.1 TCGA query 4.2 PCAWG query 4.3 CCLE query 4.4 General query", " Chapter 4 Molecular data query 4.1 TCGA query Search molecular identifiers for TCGA samples: Figure 3.2 Table 4.1: Specilized functions to query TCGA molecular data Database Type Datasets Function TCGA mRNA 3 get_pancan_gene_value() TCGA transcript 3 get_pancan_transcript_value() TCGA protein 1 get_pancan_protein_value() TCGA mutation 1 get_pancan_mutation_status() TCGA cnv 3 get_pancan_cn_value() TCGA methylation 2 get_pancan_methylation_value() TCGA miRNA 1 get_pancan_miRNA_value() 4.1.1 get_pancan_gene_value() get_pancan_gene_value(identifier, norm = c(\"tpm\", \"fpkm\", \"nc\")) data.list = get_pancan_gene_value(&quot;TP53&quot;, norm = &quot;tpm&quot;) data = data.list$expression head(data.frame(value=data)) ## value ## GTEX-S4Q7-0003-SM-3NM8M 4.785 ## TCGA-19-1787-01 5.887 ## TCGA-S9-A7J2-01 5.517 ## GTEX-QV31-1626-SM-2S1QC 4.431 ## TCGA-G3-A3CH-11 2.382 ## TCGA-B5-A5OE-01 5.765 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit toilHub TcgaTargetGtex_rsem_gene_tpm 19131 log2(tpm+0.001) toilHub TcgaTargetGtex_rsem_gene_fpkm 19131 log2(fpkm+0.001) toilHub TcgaTargetGtex_RSEM_Hugo_norm_count 19120 log2(norm_count+1) 4.1.2 get_pancan_transcript_value() get_pancan_transcript_value(identifier, norm = c(\"tpm\", \"fpkm\", \"nc\")) data.list = get_pancan_transcript_value(&quot;ENST00000456328&quot;, norm = &quot;tpm&quot;) data = data.list$expression head(data.frame(value=data)) ## value ## GTEX-S4Q7-0003-SM-3NM8M -5.012 ## TCGA-19-1787-01 -9.966 ## TCGA-S9-A7J2-01 -4.035 ## GTEX-QV31-1626-SM-2S1QC -9.966 ## TCGA-G3-A3CH-11 -9.966 ## GTEX-13OVI-1026-SM-5L3EM -9.966 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit toilHub TcgaTargetGtex_rsem_isoform_tpm 19131 log2(tpm+0.001) toilHub TcgaTargetGtex_RSEM_isoform_fpkm 19129 log2(fpkm+0.001) toilHub TcgaTargetGtex_rsem_isopct 19131 IsoPct 4.1.3 get_pancan_protein_value() get_pancan_protein_value(identifier) data.list = get_pancan_protein_value(&quot;ACC_pS79&quot;) data = data.list$expression head(data.frame(value=data)) ## value ## TCGA-FI-A2EY-01 2.2170 ## TCGA-DF-A2KS-01 0.4139 ## TCGA-A5-A1OH-01 0.0000 ## TCGA-AX-A2H7-01 0.3248 ## TCGA-AX-A2HA-01 -1.2410 ## TCGA-A5-A2K4-01 -0.2814 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit pancanAtlasHub TCGA-RPPA-pancan-clean.xena 7744 norm_value 4.1.4 get_pancan_mutation_status() get_pancan_mutation_status(identifier) data = get_pancan_mutation_status(&quot;TP53&quot;) head(data.frame(value=data)) ## value ## TCGA-02-0003-01 1 ## TCGA-02-0033-01 1 ## TCGA-02-0047-01 0 ## TCGA-02-0055-01 1 ## TCGA-02-2470-01 0 ## TCGA-02-2483-01 1 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit pancanAtlasHub mc3.v0.2.8.PUBLIC.nonsilentGene.xena 9104 NA 4.1.5 get_pancan_cn_value() get_pancan_cn_value(identifier, gistic2 = TRUE, use_thresholded_data = FALSE) data.list = get_pancan_cn_value(&quot;TP53&quot;) data = data.list$data head(data.frame(value=data)) ## value ## TCGA-A5-A0GI-01 0.014 ## TCGA-S9-A7J2-01 0.068 ## TCGA-06-0150-01 0.015 ## TCGA-AR-A1AH-01 -0.761 ## TCGA-EK-A2RE-01 -0.024 ## TCGA-44-6778-01 -0.317 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit tcgaHub …_Gistic2_all_data_by_genes 10845 Gistic2 copy number tcgaHub …_Gistic2_all_thresholded.by_genes 10845 -2,-1,0,1,2: 2 copy del,1 copy del,no change,amplification,high-amplification pancanAtlasHub …_SNP_6_whitelisted.gene.xena 10873 log(tumor/normal) 4.1.6 get_pancan_methylation_value() get_pancan_methylation_value( identifier, type = c(&quot;450K&quot;, &quot;27K&quot;), rule_out = NULL, aggr = c(&quot;NA&quot;, &quot;mean&quot;, &quot;Q0&quot;, &quot;Q25&quot;, &quot;Q50&quot;, &quot;Q75&quot;, &quot;Q100&quot;) ) data.list = get_pancan_methylation_value(&quot;TP53&quot;) data = data.list$data head(data.frame(value=data)) ## value ## TCGA-S6-A8JX-01 0.07085 ## TCGA-SO-A8JP-01 0.08410 ## TCGA-YU-A90Q-01 0.08465 ## TCGA-2G-AAH8-01 0.09373 ## TCGA-2G-AAGY-05 0.09546 ## TCGA-XE-AAOL-01 0.09774 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit gdcHub GDC-PANCAN.methylation450.tsv 9736 beta value gdcHub GDC-PANCAN.methylation27.tsv 2595 beta value 4.1.7 get_pancan_miRNA_value() get_pancan_miRNA_value(identifier, gistic2 = TRUE, use_thresholded_data = FALSE) data.list = get_pancan_miRNA_value(&quot;hsa-let-7a-2-3p&quot;) data = data.list$expression head(data.frame(value=data)) ## value ## TCGA-C4-A0F6-01 0.99 ## TCGA-CU-A0YO-01 1.91 ## TCGA-BT-A0S7-01 3.02 ## TCGA-CU-A0YR-01 0.85 ## TCGA-BL-A0C8-01 0.85 ## TCGA-C4-A0F0-01 2.70 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit pancanAtlasHub pancanMiRs_EBadjOnProtocolPlatformWithoutRepsWithUnCorrectMiRs_08_04_16.xena 10818 log2(norm_value+1) 4.2 PCAWG query Search molecular identifiers for TCGA samples: Figure 3.3 Table 4.2: Specilized functions to query PCAWG molecular data Database Type Datasets Function PCAWG mRNA 1 get_pcawg_gene_value() PCAWG fusion 1 get_pcawg_fusion_value() PCAWG miRNA 2 get_pcawg_miRNA_value() PCAWG promoter 3 get_pcawg_promoter_value() PCAWG APOBEC 1 get_pcawg_APOBEC_mutagenesis_value() 4.2.1 get_pcawg_gene_value() get_pcawg_gene_value(identifier) data.list = get_pcawg_gene_value(&quot;TP53&quot;) data = data.list$data head(data.frame(value=data)) ## value ## SP89389 1.798 ## SP21193 6.542 ## SP13206 4.690 ## SP103623 4.143 ## SP47089 4.846 ## SP32742 5.010 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit pcawgHub tophat_star_fpkm_uq.v2_aliquot_gl.sp.log 1521 log2(fpkm-uq+0.001) 4.2.2 get_pcawg_fusion_value() get_pcawg_fusion_value(identifier) data.list = get_pcawg_fusion_value(&quot;SAMD11&quot;) data = data.list$data head(data.frame(value=data)) ## value ## SP23639 0 ## SP23769 0 ## SP23925 0 ## SP24129 0 ## SP24236 0 ## SP24565 0 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit pcawgHub pcawg3_fusions_PKU_EBI.gene_centric.sp.xena 1359 binary fusion call, 1 fusion, 0 otherwise 4.2.3 get_pcawg_miRNA_value() get_pcawg_miRNA_value(identifier, norm = c(\"TMM\", \"UQ\")) data.list = get_pcawg_miRNA_value(&quot;hsa-let-7a-2-3p&quot;) data = data.list$data head(data.frame(value=data)) ## value ## SP1029 2.894 ## SP1588 2.286 ## SP119599 2.484 ## SP1437 1.801 ## SP1347 1.529 ## SP106899 1.788 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit pcawgHub x3t2m1.mature.TMM.mirna.matrix.log 1524 log2(cpm-TMM+0.1) pcawgHub x3t2m1.mature.UQ.mirna.matrix.log 1524 log2(cpm-uq+0.1) 4.2.4 get_pcawg_promoter_value() get_pcawg_promoter_value(identifier, type = c(\"raw\", \"relative\", \"outlier\")) data.list = get_pcawg_promoter_value(&quot;prmtr.1&quot;) data = data.list$data head(data.frame(value=data)) ## value ## SP23639 34.51 ## SP23769 35.16 ## SP23925 24.63 ## SP24129 44.71 ## SP24236 172.40 ## SP24565 15.51 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit pcawgHub rawPromoterActivity.sp 1359 raw promoter activity pcawgHub promoterCentricTable_0.2_1.0.sp 1359 -1 (low expression), 0 (normal), 1 (high expression) pcawgHub relativePromoterActivity.sp 1359 portion of transcription activity of the gene driven by the promoter 4.2.5 get_pcawg_APOBEC_mutagenesis_value() get_pcawg_APOBEC_mutagenesis_value(identifier) data.list = get_pcawg_APOBEC_mutagenesis_value(&quot;A3A_or_A3B&quot;) data = data.list$data head(data.frame(value=data)) ## value ## SP117425 0 ## SP117332 0 ## SP117655 1 ## SP99293 1 ## SP99329 1 ## SP99309 1 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit pcawgHub MAF_Aug31_2016_sorted_A3A_A3B_comparePlus.sp 2072 NA 4.3 CCLE query Search molecular identifiers for TCGA samples: Figure 3.3 Table 4.3: Specilized functions to query CCLE molecular data Database Type Datasets Function CCLE mRNA 2 get_ccle_gene_value() CCLE protein 1 get_ccle_protein_value() CCLE mutation 1 get_ccle_mutation_status() CCLE cnv 1 get_ccle_cn_value() 4.3.1 get_ccle_gene_value() get_ccle_gene_value(identifier, norm = c(\"rpkm\", \"nc\")) data.list = get_ccle_gene_value(&quot;TP53&quot;, norm = &quot;rpkm&quot;) data = data.list$expression head(data.frame(value=data)) ## value ## 22RV1_PROSTATE 7.537 ## 2313287_STOMACH 45.590 ## 253JBV_URINARY_TRACT 28.510 ## 253J_URINARY_TRACT 28.040 ## 42MGBA_CENTRAL_NERVOUS_SYSTEM 13.920 ## 5637_URINARY_TRACT 33.350 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit publicHub ccle/CCLE_DepMap_18Q2_RNAseq_RPKM_20180502 1076 RPKM publicHub ccle/CCLE_DepMap_18Q2_RNAseq_reads_20180502.log2 1076 log2(count+1) 4.3.2 get_ccle_gene_value() get_ccle_protein_value(identifier) data.list = get_ccle_protein_value(&quot;14-3-3_beta&quot;) data = data.list$expression head(data.frame(value=data)) ## value ## DMS53_LUNG -0.10490 ## SW1116_LARGE_INTESTINE 0.35850 ## NCIH1694_LUNG 0.02874 ## P3HR1_HAEMATOPOIETIC_AND_LYMPHOID_TISSUE 0.12000 ## HUT78_HAEMATOPOIETIC_AND_LYMPHOID_TISSUE -0.26900 ## UMUC3_URINARY_TRACT -0.17120 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit publicHub ccle/CCLE_RPPA_20180123 899 NA 4.3.3 get_ccle_mutation_status() get_ccle_mutation_status(identifier) data = get_ccle_mutation_status(&quot;TP53&quot;) data = data[data$genes==&quot;TP53&quot;,c(&quot;sampleID&quot;, &quot;genes&quot;)] head(na.omit(data)) ## # A tibble: 6 × 2 ## sampleID genes ## &lt;chr&gt; &lt;chr&gt; ## 1 22RV1_PROSTATE TP53 ## 2 22RV1_PROSTATE TP53 ## 3 A253_SALIVARY_GLAND TP53 ## 4 A431_SKIN TP53 ## 5 A4FUK_HAEMATOPOIETIC_AND_LYMPHOID_TISSUE TP53 ## 6 A673_BONE TP53 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit publicHub ccle/CCLE_DepMap_18Q2_maf_20180502 1549 NA 4.3.4 get_ccle_cn_value() get_ccle_cn_value(identifier) data.list = get_ccle_cn_value(&quot;TP53&quot;) data = data.list$data head(data.frame(value=data)) ## value ## LOUNH91_LUNG -0.0709 ## T98G_CENTRAL_NERVOUS_SYSTEM 0.2473 ## IPC298_SKIN -0.7917 ## RPMI8226_HAEMATOPOIETIC_AND_LYMPHOID_TISSUE -0.5341 ## MIAPACA2_PANCREAS 0.1259 ## HS695T_SKIN 0.2196 Information of available datasets: Xena Hub Xena Datasets Sample Size Unit publicHub ccle/CCLE_copynumber_byGene_2013-12-03 1043 log(copy number/2) 4.4 General query 4.4.1 query_pancan_value() General TPC query query_pancan_value( molecule, data_type = c(&quot;mRNA&quot;, &quot;transcript&quot;, &quot;protein&quot;, &quot;mutation&quot;, &quot;cnv&quot;, &quot;methylation&quot;, &quot;miRNA&quot;, &quot;fusion&quot;, &quot;promoter&quot;, &quot;APOBEC&quot;), database = c(&quot;toil&quot;, &quot;ccle&quot;, &quot;pcawg&quot;), reset_id = NULL, opt_pancan = .opt_pancan ) .opt_pancan ## $toil_mRNA ## $toil_mRNA$norm ## [1] &quot;tpm&quot; ## ## ## $toil_transcript ## list() ## ## $toil_protein ## list() ## ## $toil_mutation ## list() ## ## $toil_cnv ## $toil_cnv$gistic2 ## [1] TRUE ## ## $toil_cnv$use_thresholded_data ## [1] FALSE ## ## ## $toil_methylation ## $toil_methylation$type ## [1] &quot;450K&quot; ## ## $toil_methylation$rule_out ## NULL ## ## $toil_methylation$aggr ## [1] &quot;NA&quot; ## ## ## $toil_miRNA ## list() ## ## $pcawg_mRNA ## list() ## ## $pcawg_fusion ## list() ## ## $pcawg_miRNA ## $pcawg_miRNA$norm ## [1] &quot;TMM&quot; ## ## ## $pcawg_promoter ## $pcawg_promoter$type ## [1] &quot;relative&quot; ## ## ## $pcawg_APOBEC ## list() ## ## $ccle_mRNA ## $ccle_mRNA$norm ## [1] &quot;rpkm&quot; ## ## ## $ccle_protein ## list() ## ## $ccle_mutation ## list() ## ## $ccle_cnv ## list() Single molecule query with modified opt_pancan opt_pancan = .opt_pancan opt_pancan$toil_mRNA$norm = &quot;nc&quot; data.list = query_pancan_value( molecule = &quot;TP53&quot;, data_type = &quot;mRNA&quot;, database = &quot;toil&quot;, opt_pancan = opt_pancan ) data = data.list$expression head(data.frame(value=data)) ## value ## GTEX-S4Q7-0003-SM-3NM8M 11.130 ## TCGA-S9-A7J2-01 11.350 ## GTEX-QV31-1626-SM-2S1QC 10.160 ## TCGA-G3-A3CH-11 9.632 ## GTEX-13OVI-1026-SM-5L3EM 9.761 ## GTEX-13OW5-0626-SM-5J2N2 9.609 Molecular signature query # a space must exist in the signature string signature &lt;- &quot;TP53 + 2*KRAS - 1.3*PTEN&quot; data.list = query_pancan_value( molecule = signature, data_type = &quot;mRNA&quot;, database = &quot;toil&quot;, opt_pancan = opt_pancan ) data = data.list$value head(data.frame(value=data)) ## value ## GTEX-S4Q7-0003-SM-3NM8M 15.756 ## TCGA-S9-A7J2-01 18.465 ## GTEX-QV31-1626-SM-2S1QC 15.402 ## TCGA-G3-A3CH-11 13.944 ## GTEX-13OVI-1026-SM-5L3EM 13.439 ## GTEX-13OW5-0626-SM-5J2N2 13.699 4.4.2 query_molecule_value() General UCSCXena Matrix dataset Genomic matrix repository data_meta = UCSCXenaTools::XenaData data_meta_gm = subset(data_meta, Type==&quot;genomicMatrix&quot;) # see the &#39;XenaDatasets&#39; column head(data_meta_gm[,c(&quot;XenaHostNames&quot;,&quot;XenaCohorts&quot;,&quot;XenaDatasets&quot;,&quot;DataSubtype&quot;)]) ## # A tibble: 6 × 4 ## XenaHostNames XenaCohorts XenaDatasets DataSubtype ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 publicHub Breast Cancer Cell Lines (Neve 2006) ucsfNeve_pub… gene expre… ## 2 publicHub Glioma (Kotliarov 2006) kotliarov200… copy number ## 3 publicHub Lung Cancer CGH (Weir 2007) weir2007_pub… copy number ## 4 publicHub Cancer Cell Line Encyclopedia (Breast) ccle/CCLE_co… copy number ## 5 publicHub Breast Cancer (Chin 2006) chin2006_pub… gene expre… ## 6 publicHub Breast Cancer (Chin 2006) chin2006_pub… copy number query_molecule_value(dataset, molecule) dataset &lt;- &quot;TCGA-BRCA.htseq_fpkm.tsv&quot; data &lt;- query_molecule_value(dataset, &quot;TP53&quot;) # also support signature head(data.frame(value=data)) ## value ## TCGA-E9-A1NI-01A 4.854 ## TCGA-A1-A0SP-01A 2.554 ## TCGA-BH-A1EU-11A 4.515 ## TCGA-A8-A06X-01A 3.844 ## TCGA-E2-A14T-01A 4.255 ## TCGA-AC-A8OS-01A 3.655 "],["molecular-data-analysis.html", "Chapter 5 Molecular data analysis 5.1 TCGA analysis 5.2 PCAWG analysis 5.3 CCLE analysis 5.4 General analysis", " Chapter 5 Molecular data analysis For each function, we introduce its basic use and example output. Users can check all analysis or visualization parameters available by clicking the corresponding title link. Among most functions, their first parameter is molecular identifier of one data type. Users can also design a molecular signature comprised of multiple molecules (e.g. TP53 + 2 * KRAS - 1.3 * PTEN). During TPC related analysis, users can modified alternative datasets for one molecular type through the opt_pancan parameter. (see more via str(.opt_pancan)) 5.1 TCGA analysis Table 5.1: Specilized functions to analyze TCGA molecular data Database Type Function TCGA Comparison vis_toil_TvsN() TCGA Comparison vis_toil_TvsN_cancer() TCGA Comparison vis_toil_Mut() TCGA Comparison vis_toil_Mut_cancer() TCGA Correlation vis_gene_cor() TCGA Correlation vis_gene_cor_cancer() TCGA Correlation vis_gene_TIL_cor() TCGA Correlation vis_gene_immune_cor() TCGA Correlation vis_gene_tmb_cor() TCGA Correlation vis_gene_msi_cor() TCGA Correlation vis_gene_stemness_cor() TCGA Correlation vis_gene_pw_cor() TCGA Survival tcga_surv_plot() TCGA Survival vis_unicox_tree() TCGA Dimension Reduction vis_dim_dist() 5.1.1 Comparison analysis 5.1.1.1 vis_toil_TvsN() Compare molecular value between tumor and normal samples across pan-cancer. Basic use: vis_toil_TvsN(Gene=, data_type=) vis_toil_TvsN(Gene=&quot;TP53&quot;, data_type = &quot;mRNA&quot;) Figure 5.1: The difference of mRNA TP53 across pan-cancer Tips: For parameter data_type, one of 4 molelcuar types c(“mRNA”, “transcript”, “methylation”, “miRNA”) are supported. 5.1.1.2 vis_toil_TvsN_cancer() Compare molecular value between tumor and normal samples in one cancer. Basic use: vis_toil_TvsN_cancer(Gene=, data_type=, Cancer=) vis_toil_TvsN_cancer(Gene=&quot;TP53&quot;, data_type = &quot;mRNA&quot;, Cancer = &quot;BRCA&quot;) Figure 5.2: The difference of mRNA TP53 in ACC cancer Tips: For parameter data_type, all molelcuar types supported in function query_pancan_value() are applicable. 5.1.1.3 vis_toil_Mut() Compare molecular value between mutation and wild tumor samples across pan-cancer. Basic use: vis_toil_Mut(mut_Gene=, Gene=, data_type=) vis_toil_Mut(mut_Gene = &quot;TP53&quot;, Gene = &quot;TNF&quot;, data_type = &quot;mRNA&quot;) Figure 5.3: The difference of mRNA TNF between TP53-mut and TP53-wild tumor samples across pan-cancer Tips: For parameter data_type, one of 4 molelcuar types c(“mRNA”, “transcript”, “methylation”, “miRNA”) are supported. 5.1.1.4 vis_toil_Mut_cancer() Compare molecular value between mutation and wild tumor samples in one cancer. Basic use: vis_toil_Mut_cancer(Gene=, data_type=, Cancer=) vis_toil_Mut_cancer(mut_Gene = &quot;TP53&quot;, Gene = &quot;TNF&quot;, data_type = &quot;mRNA&quot;, Cancer = &quot;BRCA&quot;) Figure 5.4: The difference of mRNA TNF between TP53-mut and TP53-wild tumor samples in BRCA cancer Tips: For parameter data_type, all molelcuar types supported in function query_pancan_value() are applicable. 5.1.2 Correlation analysis 5.1.2.1 vis_gene_cor() Calculate the correlation between two molecules value in tumor samples of pan-cancers. Basic use: vis_gene_cor(Gene1=, data_type1=, Gene2=, data_type2=) vis_gene_cor(Gene1 = &quot;CSF1R&quot;, data_type1 = &quot;mRNA&quot;, Gene2 = &quot;JAK3&quot;, data_type2 = &quot;mRNA&quot;) Figure 5.5: The correlation between mRNA CSF1R and mRNA JAK3 in tumor samples of pan-cancers 5.1.2.2 vis_gene_cor_cancer() Calculate the correlation between two molecules value in tumor samples of one cancer. Basic use: vis_gene_cor_cancer(Gene1=, data_type1=, Gene2=, data_type2=, cancer_choose=) vis_gene_cor_cancer(Gene1 = &quot;CSF1R&quot;, data_type1 = &quot;mRNA&quot;, Gene2 = &quot;JAK3&quot;, data_type2 = &quot;mRNA&quot;, cancer_choose = &quot;ACC&quot;) Figure 5.6: The correlation between mRNA CSF1R and mRNA JAK3 in tumor samples of ACC cancer 5.1.2.3 vis_gene_TIL_cor() Calculate the correlation between one molecule and one type of TIL in tumor samples across pan-cancers. Basic use: vis_gene_TIL_cor(Gene= ,data_type= ,sig=) tcga_ids = load_data(&quot;pancan_identifier_help&quot;) names(tcga_ids$id_TIL) ## [1] &quot;CIBERSORT&quot; &quot;CIBERSORT-ABS&quot; &quot;EPIC&quot; &quot;MCPCOUNTER&quot; ## [5] &quot;QUANTISEQ&quot; &quot;TIMER&quot; &quot;XCELL&quot; sig = paste(tcga_ids$id_TIL$TIMER$Level3, tcga_ids$id_TIL$TIMER$Level2, sep = &quot;_&quot;) vis_gene_TIL_cor(Gene = &quot;TP53&quot;, data_type = &quot;mRNA&quot;, sig = sig) Figure 5.7: The correlation between mRNA TP53 and TIMER TIL in tumor samples across pan-cancers 5.1.2.4 vis_gene_immune_cor() Calculate the correlation between one molecule and one type of Immune signature in tumor samples across pan-cancers. Basic use: vis_gene_immune_cor(Gene= ,data_type= ,sig=) tcga_pan_immune_signature &lt;- load_data(&quot;tcga_pan_immune_signature&quot;) ## Loading data from remote: https://zenodo.org/record/10554197/files/tcga_pan_immune_signature.rda, please wait... ## Data has been saved to C:/Users/xiaoxin/AppData/Local/R/win-library/4.2/UCSCXenaShiny/extdata/tcga_pan_immune_signature.rda table(tcga_pan_immune_signature$Source) ## ## Attractors Bindea c7atoms Cibersort ICR Wolf Yasin ## 9 25 32 20 3 68 3 vis_gene_immune_cor(Gene = &quot;TP53&quot;, data_type = &quot;mRNA&quot;, Immune_sig_type = &quot;Cibersort&quot;) Figure 5.8: The correlation between mRNA TP53 and Cibersort signature in tumor samples across pan-cancers 5.1.2.5 vis_gene_tmb_cor() Calculate the correlation between one molecule and TMB score in tumor samples across pan-cancers. Basic use: vis_gene_tmb_cor(Gene= , data_type= ) vis_gene_tmb_cor(Gene = &quot;TP53&quot;, data_type = &quot;mRNA&quot;) Figure 5.9: The correlation between mRNA TP53 and TMB score in tumor samples across pan-cancers 5.1.2.6 vis_gene_msi_cor() Calculate the correlation between one molecule and MSI score in tumor samples across pan-cancers. Basic use: vis_gene_msi_cor(Gene= , data_type= ) vis_gene_msi_cor(Gene = &quot;TP53&quot;, data_type = &quot;mRNA&quot;) Figure 5.10: The correlation between mRNA TP53 and MSI score in tumor samples across pan-cancers 5.1.2.7 vis_gene_stemness_cor() Calculate the correlation between one molecule and stemness score in tumor samples across pan-cancers. Basic use: vis_gene_stemness_cor(Gene= , data_type= ) vis_gene_stemness_cor(Gene = &quot;TP53&quot;, data_type = &quot;mRNA&quot;) Figure 5.11: The correlation between mRNA TP53 and stemness score in tumor samples across pan-cancers 5.1.2.8 vis_gene_pw_cor() Calculate the correlation between one molecule and pathway score in tumor samples of one cancer. Basic use: vis_gene_pw_cor(Gene= , data_type= ) vis_gene_pw_cor(Gene = &quot;TP53&quot;, data_type = &quot;mRNA&quot;, pw_name = &quot;HALLMARK_ADIPOGENESIS&quot;, cancer_choose = &quot;ACC&quot;) Figure 5.12: The correlation between mRNA TP53 and pathway score in tumor samples in ACC cancer 5.1.3 Survival analysis 5.1.3.1 tcga_surv_plot() Perform the log-rank test of one molecule for one cancer. Basic use: tcga_surv_plot(data=, time= , status= ) # Firstly, prepare the molecular value as well as survival data data &lt;- tcga_surv_get(item = &quot;TP53&quot;,profile = &quot;mRNA&quot;, TCGA_cohort = &quot;LUAD&quot;) head(data) ## # A tibble: 6 × 13 ## sampleID value OS OS.time DSS DSS.time DFI DFI.time PFI PFI.time ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 TCGA-05-4420… 4.51 0 912 0 912 0 912 0 912 ## 2 TCGA-91-6840… 5.90 0 372 0 372 0 372 0 372 ## 3 TCGA-44-6778… 5.30 0 1864 0 1864 0 1864 0 1864 ## 4 TCGA-67-3774… 5.22 0 385 0 385 NA NA 0 385 ## 5 TCGA-64-1679… 5.46 0 2488 0 2488 0 2488 0 2488 ## 6 TCGA-55-6982… 4.54 1 995 1 995 NA NA 1 183 ## # ℹ 3 more variables: gender &lt;chr&gt;, age &lt;dbl&gt;, stage &lt;chr&gt; tcga_surv_plot(data, time = &quot;DSS.time&quot;, status = &quot;DSS&quot;) # OS/DSS/DFI/PFI ## Warning in do_once((if (is_R_CMD_check()) stop else warning)(&quot;The function ## xfun::isFALSE() will be deprecated in the future. Please &quot;, : The function ## xfun::isFALSE() will be deprecated in the future. Please consider using ## base::isFALSE(x) or identical(x, FALSE) instead. Figure 5.13: The log-rank test (DSS) of mRNA TP53 for LUAD cancer By default, the median data of molecular data is used to divided into two groups for log-rank test. It can be modified in corresponding paramters. 5.1.3.2 vis_unicox_tree() Perform the Cox regression analysis of one molecule across pan-cancers. Basic use: vis_unicox_tree(Gene= , data_type= , measure=) vis_unicox_tree(Gene = &quot;PTEN&quot;, data_type = &quot;mRNA&quot;, measure = &quot;OS&quot;) Figure 5.14: The Cox regression analysis (OS) of mRNA PTEN across pan-cancers By default, the median data of molecular data is used to divided into two groups for Cox regression analysis. It can be modified in corresponding paramters. 5.1.4 Dimension reduction 5.1.4.1 vis_dim_dist() Perform dimension reduction analysis of multiple molecules for samples in groups. Basic use: vis_dim_dist(ids=, data_type= ,group_info= ) # Firstly, prepare the grouping information of samples group_info = tcga_clinical_fine %&gt;% dplyr::filter(Cancer==&quot;BRCA&quot;) %&gt;% dplyr::select(Sample, Code) %&gt;% dplyr::rename(Group=Code) head(group_info) ## # A tibble: 6 × 2 ## Sample Group ## &lt;chr&gt; &lt;chr&gt; ## 1 TCGA-3C-AAAU-01 TP ## 2 TCGA-3C-AALI-01 TP ## 3 TCGA-3C-AALJ-01 TP ## 4 TCGA-3C-AALK-01 TP ## 5 TCGA-4H-AAAK-01 TP ## 6 TCGA-5L-AAT0-01 TP ids = c(&quot;TP53&quot;, &quot;KRAS&quot;, &quot;PTEN&quot;, &quot;MDM2&quot;, &quot;CDKN1A&quot;) vis_dim_dist(ids = ids, data_type = &quot;mRNA&quot;, group_info= group_info) Figure 5.15: The dimension reduction analysis (PCA) of 5 mRNA molcules in BRCA cancer samples grouped by tissue codes 5.2 PCAWG analysis Table 5.2: Specilized functions to analyze PCAWG molecular data Database Type Function PCAWG Comparison vis_pcawg_dist() PCAWG Correlation vis_pcawg_gene_cor() PCAWG Survival vis_pcawg_unicox_tree() 5.2.1 Comparsion analysis 5.2.1.1 vis_pcawg_dist() Compare molecular value between tumor and normal samples across pan-cancer. Basic use: vis_pcawg_dist(Gene= ,data_type= ) vis_pcawg_dist(Gene = &quot;TP53&quot;, data_type = &quot;mRNA&quot;) 5.2.2 Correlation analysis 5.2.2.1 vis_pcawg_gene_cor() Calculate the correlation between two molecules value in tumor samples of one cancer. Basic use: vis_pcawg_gene_cor(Gene1= ,data_type1 = ,Gene2 = ,data_type2 = ,dcc_project_code_choose=) vis_pcawg_gene_cor(Gene1 = &quot;CSF1R&quot;, data_type1 = &quot;mRNA&quot;, Gene2 = &quot;JAK3&quot;, data_type2 = &quot;mRNA&quot;, dcc_project_code_choose = &quot;BLCA-US&quot;) 5.2.3 Survival analysis 5.2.3.1 vis_pcawg_unicox_tree() Perform the Cox regression analysis (OS) of one molecule across pan-cancers. Basic use: vis_pcawg_unicox_tree(Gene= , data_type= ) vis_pcawg_unicox_tree(Gene = &quot;TP53&quot;, data_type = &quot;mRNA&quot;) Figure 5.16: The Cox regression analysis (OS) of mRNA TP53 across pan-cancers By default, the median data of molecular data is used to divided into two groups for Cox regression analysis. It can be modified in corresponding paramters. 5.3 CCLE analysis Table 5.3: Specilized functions to analyze CCLE molecular data Database Type Function CCLE Comparison vis_ccle_tpm() CCLE Comparison vis_gene_drug_response_diff() CCLE Correlation vis_ccle_gene_cor() CCLE Correlation vis_gene_drug_response_asso() 5.3.1 Comparsion analysis 5.3.1.1 vis_ccle_tpm() Compare molecular value among different tissues of cancer cell lines. Basic use: vis_ccle_tpm(Gene= ,data_type= ) vis_ccle_tpm(Gene = &quot;TP53&quot;, data_type = &quot;mRNA&quot;) 5.3.2 Correlation analysis 5.3.2.1 vis_ccle_gene_cor() Calculate the correlation between two molecules value in one tissue type of cancer cell lines. Basic use: vis_ccle_gene_cor(Gene1= ,data_type1= ,Gene2= ,data_type2= ,SitePrimary= ) vis_ccle_gene_cor(Gene1 = &quot;CSF1R&quot;, data_type1 = &quot;mRNA&quot;, Gene2 = &quot;JAK3&quot;, data_type2 = &quot;mRNA&quot;, SitePrimary = &quot;prostate&quot;) vis_gene_drug_response_diff() and vis_gene_drug_response_asso() are initially designed for drug pharmacogenomics analysis. In the updated shiny application, we have provided more comprehensive pharmacogenomics analysis. 5.4 General analysis Table 5.4: Specilized functions to analyze General molecular data Database Type Function General Comparison vis_identifier_grp_comparison() General Correlation vis_identifier_cor() General Correlation vis_identifier_multi_cor() General Survival vis_identifier_grp_surv() General Dimension Reduction vis_identifier_dim_dist() 5.4.1 Comparison analysis 5.4.1.1 vis_identifier_grp_comparison() Compare molecular value between custom groups based on one genomics matrix UCSC Xena dataset. Basic use: vis_identifier_grp_comparison(dataset= , id= ,grp_df= ) # Firstly, prepare custom groups of samples library(UCSCXenaTools) cli_df &lt;- XenaGenerate( subset = XenaDatasets == &quot;TCGA.LUAD.sampleMap/LUAD_clinicalMatrix&quot; ) %&gt;% XenaQuery() %&gt;% XenaDownload() %&gt;% XenaPrepare() grp_df = cli_df[, c(&quot;sampleID&quot;, &quot;pathologic_M&quot;)] %&gt;% dplyr::filter(pathologic_M %in% c(&quot;M0&quot;, &quot;M1&quot;, &quot;MX&quot;)) head(grp_df) # col-1: sample; col-2: grouping info ## # A tibble: 6 × 2 ## sampleID pathologic_M ## &lt;chr&gt; &lt;chr&gt; ## 1 TCGA-05-4244-01 M1 ## 2 TCGA-05-4249-01 M0 ## 3 TCGA-05-4250-01 M0 ## 4 TCGA-05-4382-01 M0 ## 5 TCGA-05-4384-01 M0 ## 6 TCGA-05-4389-01 M0 mol_dataset &lt;- &quot;TCGA.LUAD.sampleMap/HiSeqV2_percentile&quot; vis_identifier_grp_comparison(dataset = mol_dataset, id = &quot;TP53&quot;, grp_df = grp_df) 5.4.2 Correlation analysis 5.4.2.1 vis_identifier_cor() Calculate the correlation between two molecules value from genomics matrix UCSC Xena datasets. Basic use: vis_identifier_cor(dataset= ,id1= ,dataset= ,id2= ) dataset &lt;- &quot;TcgaTargetGtex_rsem_isoform_tpm&quot; vis_identifier_cor(dataset1 = dataset, id1 = &quot;TP53&quot;, dataset2 = dataset, id2 = &quot;KRAS&quot;) ## Warning: package &#39;ggplot2&#39; was built under R version 4.2.3 5.4.2.2 vis_identifier_multi_cor() Calculate the pairwise correlation among multiple molecules value from one genomics matrix UCSC Xena dataset. Basic use: vis_identifier_multi_cor(dataset= ,ids= ) dataset &lt;- &quot;TcgaTargetGtex_rsem_isoform_tpm&quot; vis_identifier_multi_cor(dataset = dataset, ids = c(&quot;TP53&quot;, &quot;KRAS&quot;, &quot;PTEN&quot;)) 5.4.3 Survival analysis 5.4.3.1 vis_identifier_grp_surv() Perform the log-rank test of one molecule for one genomics matrix UCSC Xena dataset. Basic use: vis_identifier_grp_surv(dataset= , id= , surv_df= ) # Firstly, prepare survival data of samples library(UCSCXenaTools) cli_df &lt;- XenaGenerate( subset = XenaDatasets == &quot;TCGA.LUAD.sampleMap/LUAD_clinicalMatrix&quot; ) %&gt;% XenaQuery() %&gt;% XenaDownload() %&gt;% XenaPrepare() surv_df &lt;- cli_df[, c(&quot;sampleID&quot;, &quot;days_to_death&quot;, &quot;vital_status&quot;)] surv_df$vital_status &lt;- ifelse(surv_df$vital_status == &quot;DECEASED&quot;, 1, 0) surv_df = na.omit(surv_df) head(surv_df) # col-1: sample; col-2: survival time; col-3: survival status ## # A tibble: 6 × 3 ## sampleID days_to_death vital_status ## &lt;chr&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 TCGA-05-4250-01 121 1 ## 2 TCGA-05-4395-01 0 1 ## 3 TCGA-05-4396-01 303 1 ## 4 TCGA-05-4397-01 731 1 ## 5 TCGA-05-4402-01 244 1 ## 6 TCGA-05-4415-01 91 1 mol_dataset &lt;- &quot;TCGA.LUAD.sampleMap/HiSeqV2_percentile&quot; vis_identifier_grp_surv(dataset = mol_dataset, id = &quot;KRAS&quot;, surv_df = surv_df) Figure 5.17: The log-rank test (DSS) of mRNA KRAS for ne specific dataset By default, the best cutoff is decided. User can change it through the cutoff_mode parameter. 5.4.4 Dimension reduction 5.4.4.1 vis_identifier_dim_dist() Perform dimension reduction analysis of multiple molecules for samples in groups. Basic use: vis_identifier_dim_dist(dataset= ,ids= , grp_df= ) # Firstly, prepare the grouping information of samples library(UCSCXenaTools) cli_dataset &lt;- &quot;TCGA.LUAD.sampleMap/LUAD_clinicalMatrix&quot; cli_df &lt;- XenaGenerate( subset = XenaDatasets == cli_dataset ) %&gt;% XenaQuery() %&gt;% XenaDownload() %&gt;% XenaPrepare() grp_df = cli_df[, c(&quot;sampleID&quot;, &quot;gender&quot;)] head(grp_df) # col-1: sample; col-2: grouping info ## # A tibble: 6 × 2 ## sampleID gender ## &lt;chr&gt; &lt;chr&gt; ## 1 TCGA-05-4244-01 MALE ## 2 TCGA-05-4249-01 MALE ## 3 TCGA-05-4250-01 FEMALE ## 4 TCGA-05-4382-01 MALE ## 5 TCGA-05-4384-01 MALE ## 6 TCGA-05-4389-01 MALE mol_dataset &lt;- &quot;TCGA.LUAD.sampleMap/HiSeqV2_percentile&quot; ids = c(&quot;TP53&quot;, &quot;KRAS&quot;, &quot;PTEN&quot;, &quot;MDM2&quot;, &quot;CDKN1A&quot;) vis_identifier_dim_dist(dataset = mol_dataset, ids = ids, grp_df = grp_df) Figure 5.18: The dimension reduction analysis (PCA) of 5 mRNA molcules in BRCA cancer samples grouped by tissue codes "],["visit.html", "Chapter 6 Visit", " Chapter 6 Visit Basic introduction; How to visit; "],["homepage.html", "Chapter 7 Homepage 7.1 Slick Gallery 7.2 TCGA Analysis Guide 7.3 Quick Molecule Exploration", " Chapter 7 Homepage 7.1 Slick Gallery Dynamically display all application interfaces and their functional descriptions Figure 7.1: Shiny Slick Gallery 7.2 TCGA Analysis Guide Based on UCSC Xena datasets, we have designed versatile analyses for TCGA as well as other databases, like PCAWG and CCLE. In the homepage, two series of TCGA analyses, including 12 custom modules (Figure) and 3 personalized pipelines, are displayed for users. Figure 7.2: 12 TCGA analytical modules Figure 7.3: 3 TCGA analytical pipelines 7.3 Quick Molecule Exploration In the top-right of homepage, two modules are provided for quick exploration of cancer molecules. Figure 7.4: Quick molecular exploration in the homepage 7.3.1 Daily Gene In this module, a gene will be randomly selected each day and analyzed for which type of TCGA cancer is differentially expressed. TPM expression data is obtained from TCGA and GTEx samples. For ease of presentation, the samples with minimum expression value of -9.966 are removed. The wilcoxon test is used, and the cancer with the lowest P value will be displayed via plotly package. Two external links to GeneCards and PubMed are also provided for search more information about the gene. Finally, users can sample another gene to perform similar analysis if they want. 7.3.2 Pan-cancer Query In this module, two functions can be used to explore the pan-cancer features of multi-omics molecules. 7.3.2.1 Tumor vs. Normal Observe and compare the molecular values in each TCGA project of normal tissue versus tumor tissue. The analysis is based on vis_toil_TvsN() function (Figure 5.1) Figure 7.5: The interface when clicking “Tumor vs. Normal” button 7.3.2.2 Generate Report For general exploration of pan-cancer feature, a well-organized report report can be automatically generated. As the figure, it firstly run the analyses given the queried molecule, which will take about one minute. Then, you can knit the report in HTML format (figure) or directly download the analyzed results in ZIP format. Figure 7.6: The interface when clicking “Generate Report” button and result The report can be generally divided into five parts to describe molecular pan-cancer features, including (1) clinical phenotypes, (2) survival influence, (3) tumor index (4) immune infiltration, (5) pathway activity. Figure 7.7: Five main parts of molecular report Here is an example report for mRNA TP53. Figure 7.8: Head part of demo report "],["repository.html", "Chapter 8 Repository 8.1 Show Metadata 8.2 Request Data 8.3 Analyze Data", " Chapter 8 Repository Explore the metadata information of most UCSC Xena datasets in the repository page. Firstly, users can query datasets according to the conditions of data hub (or further cohort) and data type (or further data subtype). By default, it will select the GDC hub and all data types. Then, the basic information of eligible datasets will be display in the right panel. Next, users can select one or multiple rows of datasets and their external links to download or browse original data are available in the bottom. Furtherly, three buttons are designed to provide specific functions. Figure 8.1: Repoistory page demonstration 8.1 Show Metadata The “Show Metadata” button will give more detailed information of selected datasets. Figure 8.2: The interface when clicking “Show Metadata” button 8.2 Request Data Through this button, three ways of downloading raw datasets are provided. “Download data directly”: Enable to directly download the data into the local device. “Download data directly”: Generate the .sh script file to download in Linux environment. “Download data directly”: Generate the R code to download especially for R users. Figure 8.3: The interface when clicking “Request Data” button 8.3 Analyze Data This button is the initial step for General Dataset Analysis, which will be mainly introduced in next chapter (link). As the figure shows, users need to firstly select one or more datasets for the Pre-selected Datasets for Analysis space. If one genomics matrix dataset (e.g. RNA-seq) is selected, its related clinical metadata (e.g. phenotype or survival data) will be automatically added. Figure 8.4: The initial step of General Dataset Analysis "],["general-dataset-analysis.html", "Chapter 9 General Dataset Analysis 9.1 Scatter-Correlation 9.2 Group-Comparison 9.3 Survival-Analysis 9.4 Dimension-Distribution", " Chapter 9 General Dataset Analysis In this page, users can explore the most Genomics matrix datasets from UCSC Xena repository with common analysis methods. As chapter 8.3 describes, the initial step involves the selection of interesting datasets from Repository page. In the following, we will take the “TCGA-BLCA.htseq_fpkm.tsv” dataset as an example to demonstrate how to operate various methods Figure 9.1: The selection of TCGA-BLCA.htseq_fpkm.tsv dataset 9.1 Scatter-Correlation Compute and visualize the correlation between two molecules based on vis_identifier_cor() function. Firstly, select two molecules from candidate dataset; Click the “Submit” button to perform analysis and the visualization result along with raw data will be display in the middle. Finally, the plot can be saved with size and format options. Figure 9.2: The steps of Scatter-Correlation analysis Notably, Two molecules can come from different datasets, but there must be intersecting samples. 9.1.1 Matrix-Correlation Compute and visualize the pair-wise correlation among multiple molecules based on vis_identifier_multi_cor() function. Firstly, select multiple molecules from one candidate dataset; Modify several analysis and visualization parameters; Click the “Submit” button to perform analysis and the visualization result along with analyzed data will be display in the middle. Finally, the plot can be saved with size and format options. Figure 9.3: The steps of Matrix-Correlation analysis 9.2 Group-Comparison Compare the differences in the distribution of values for one molecule under a specified phenotypic grouping based on vis_identifier_grp_comparison() function. Select a dataset and use one of its columns as the basis for grouping. (dataset 1) Select a dataset and use one of its numeric columns as the values to compare. (dataset 2). Figure 9.4: The steps of Group-Comparison analysis Based on above two selections, then set sample groups by clicking “Preprocess” button. Step1: From the columns of dataset 1, select the sample id column (Sample column), which is usually left as a default. Then, select a column (Group column) as the basis for grouping. If it is a numeric column, you can set the percentile cutoffs by the slider widget. Step2: From the columns of dataset 2, select the sample id column (Sample column) and molecule column (Value column). Step3: Click the “Click to joint the data” button to finally generate grouping result. If there are no problems, exit this interface. Figure 9.5: The Group-Comparison grouping via the Preprocess button Modify several analysis parameters; Click the “Submit” button to perform analysis and the visualization result along with raw data will be display in the middle. Finally, the plot can be saved with size and format options. 9.3 Survival-Analysis Perform the grouping log-rank survival analysis, especially for TCGA related datasets based on vis_identifier_grp_surv() function. Select a dataset and use one of its columns as the basis for grouping. (dataset 1) Select one survival dataset with event time and status columns. (dataset 2). Figure 9.6: The steps of Survival-Analysis Based on above two selections, then set sample groups by clicking “Preprocess” button. Step1: From the columns of dataset 1, select the sample id column (Sample column), which is usually left as a default. Then, select a column (Group column) as the basis for grouping. If it is a numeric column, you can set the percentile cutoffs by the slider widget or automatically calculate its best cutoff. Step2: From the columns of dataset 2, select the sample id column (Sample column) and two survival related column (Time column, Status column). Step3: Click the “Click to joint the data” button to finally generate grouping result. If there are no problems, exit this interface. Figure 9.7: The Survival-Analysis grouping via the Preprocess button Click the “Submit” button to perform analysis and the visualization result along with raw data will be display in the middle. Finally, the plot can be saved with size and format options. 9.4 Dimension-Distribution Perform the dimension reduction analysis based on multiple molecules of one genomics matrix datasets based on vis_identifier_dim_dist() function. Select a dataset and use one of its columns as the basis for grouping. (dataset 1) Select a genomics matrix dataset and further multiple molecular columns via three ways. (dataset 2). “Select”: One-by-one selection; “Pathway”: batch selection under one pathway; “File”: Upload of identifier file. Figure 9.8: The steps of Dimension-Distribution Based on above two selections, then set sample groups by clicking “Preprocess” button. Step1: From the columns of dataset 1, select the sample id column (Sample column), which is usually left as a default. Then, select a column (Group column) as the basis for grouping. If it is a numeric column, you can set the percentile cutoffs by the slider widget. Step2: From the columns of dataset 2, select the sample id column (Sample column) and molecule columns (Value column). Step3: Click the “Click to joint the data” button to finally generate grouping result. If there are no problems, exit this interface. Figure 9.9: The Dimension-Distribution grouping via the Preprocess button Modify several analysis and visualization parameters; 3 DR methods (PCA/UMAP/TSNE) are supported. Click the “Submit” button to perform analysis and the visualization result along with analyzed data will be display in the middle. Finally, the plot can be saved with size and format options. "],["custom-tpc-modules.html", "Chapter 10 Custom TPC modules 10.1 TCGA 10.2 PCAWG 10.3 CCLE", " Chapter 10 Custom TPC modules Each custom module can perform one specific TPC (TCGA, PCAWG, CCLE), analysis mainly based on UCSCXenaShiny functions introduced in chapter 6. Figure 10.1: All Custom TPC modules in shiny app The initial step of most modules usually involves the check and modification of molecular datasets through the Modify datasets[opt] widget. As mentioned in chapter 5, we can easily fetch several single molecular data from TPC databases. For some of them, their are alternative datasets for users to select, which greatly enriches the analytical arrange. Among the 7 types of TCGA molecules, 4 of them have the alternative datasets. (Figure) Figure 10.2: Alternative datasets of TCGA molecules Tips: For DNA Methylation, mean value of all CpG sites under one gene will be calculated for the gene by default. In the Modify datasets[opt] widget, users can furtherly limit its CpG sites and modify the aggregation method (e.g. median). Among the 5 types of PCAWG molecules, 2 of them have the alternative datasets. (Figure) Among the 4 types of CCLE molecules, 1 of them have the alternative datasets. (Figure) Figure 10.3: Alternative datasets of PCAWG and CCLE molecules 10.1 TCGA Table 10.1: Custom modules for TCGA analysis Database Type Module TCGA Comparison TCGA+GTEx: Molecular Profile Distribution (Tumor VS Normal) TCGA Comparison TCGA: Association Between Molecular Profile and Gene Mutation TCGA Correlation TCGA: Molecule-Molecule Correlation TCGA Correlation TCGA: Association Between Molecular Profile and Tumor Immune Infiltration TCGA Correlation TCGA: Association Between Molecular Profile and Immune Signature TCGA Correlation TCGA: Association Between Molecular Profile and TMB/Stemness/MSI (Radar Show) TCGA Correlation TCGA: Association Between Molecular Profile and Pathway Score TCGA Survival TCGA: Molecular Profile Log-rank Analysis TCGA Survival TCGA: Molecular Profile Cox Analysis TCGA Dimension Reduction TCGA: Dimension Reduction Distribution 10.1.1 Comparison 10.1.1.1 TCGA+GTEx: Molecular Profile Distribution (Tumor VS Normal) Compare molecular values between tumor and normal samples combing TCGA and GTEx datasets. Based on vis_toil_TvsN() andvis_toil_TvsN_cancer() functions. Select one molecular type and identifier. The mode for single cancer or pan-cancer comparison can be decided here. Adjust the visualization parameters. “TCGA Dataset only” means whether add GTEx datasets as normal samples or not. Click the “Go!” button to perform analysis and display the plot in the right. The raw data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.4: The steps of module “TCGA+GTEx: Molecular Profile Distribution (Tumor VS Normal)” 10.1.1.2 TCGA: Association Between Molecular Profile and Gene Mutation Compare molecular values between gene-mutant and gene-wild tumor samples for TCGA datasets. Based on vis_toil_Mut() andvis_toil_Mut_cancer() functions. Select one gene to decide the sample grouping based on whether it is mutated or not. It is necessary to click the bottom “Check” button to see if there are enough mutated samples. Select one molecular type and identifier. The mode for single cancer or pan-cancer comparison can be decided here. Adjust the visualization parameters. Click the “Go!” button to perform analysis and display the plot in the right. The raw data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.5: The steps of module “TCGA: Association Between Molecular Profile and Gene Mutation” 10.1.2 Correlation 10.1.2.1 TCGA: Molecule-Molecule Correlation Compute and visualize the correlation between two molecules based on TCAG databases. Based on vis_gene_cor() andvis_gene_cor_cancer() functions. Select two molecules. They can come from different datasets. Adjust the visualization and analysis parameters. “Use All Cancer Types” means whether directly use tumor samples from all TCGA. Click the “Go!” button to perform analysis and display the plot in the right. The raw data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.6: The steps of module “TCGA: Molecule-Molecule Correlation” 10.1.2.2 TCGA: Association Between Molecular Profile and Tumor Immune Infiltration Compute the correlation of pan-cancers between one molecule and tumor Immune Infiltration. Based on vis_gene_TIL_cor() function. Select one molecule and interesting immune infiltration estimations. Adjust the analysis parameter. Click the “Go!” button to perform analysis and display the plot in the right. The analyzed data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.7: The steps of module “TCGA: Association Between Molecular Profile and Tumor Immune Infiltration” 10.1.2.3 TCGA: Association Between Molecular Profile and Immune Signature Compute the correlation of pan-cancers between one molecule and tumor Immune Signature. Based on vis_gene_immune_cor() function. Select one molecule and one source of immune signatures. Adjust the analysis parameter. Click the “Go!” button to perform analysis and display the plot in the right. The analyzed data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.8: The steps of module “TCGA: Association Between Molecular Profile and Immune Signature” 10.1.2.4 TCGA: Association Between Molecular Profile and TMB/Stemness/MSI (Radar Show) Compute the correlation of pan-cancers between one molecule and TMB/Stemness/MSI index. Based on vis_gene_tmb_cor(), vis_gene_msi_cor() and vis_gene_stemness_cor() functions. Select one molecule and one of TMB/Stemness/MSI index. Adjust the analysis parameter. Click the “Go!” button to perform analysis and display the plot in the right. The analyzed data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.9: The steps of module “TCGA: Association Between Molecular Profile and TMB/Stemness/MSI (Radar Show)” 10.1.2.5 TCGA: Association Between Molecular Profile and Pathway Score Compute the correlation of pan-cancers between one molecule and Pathway Score. Based on vis_gene_pw_cor() function. Select one molecule and one pathway. Adjust the visualization and analysis parameter. “Use All Cancer Types” means whether use tumor samples from all TCGA or just one cancer. Click the “Go!” button to perform analysis and display the plot in the right. The raw data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.10: The steps of module “TCGA: Association Between Molecular Profile and Pathway Score” 10.1.3 Survival analysis 10.1.3.1 TCGA: Molecular Profile Log-rank Analysis Perform one molecular Log-rank survival analysis in one TCGA cancer. Based on tcga_surv_plot() function. Select one TCGA cancer and one molecule. Filter samples according to Age/Sex/Stage. Select survival endpoint type and molecular grouping mode. Click the “Go!” button to perform analysis and display the plot in the right. The raw data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.11: The steps of module “TCGA: Molecular Profile Log-rank Analysis” 10.1.3.2 TCGA: Molecular Profile Cox Analysis Perform one molecular Log-rank survival analysis in TCGA pan-cancers. Based on vis_unicox_tree() function. Select one molecule. Select survival endpoint type and molecular grouping threshold. Modify visualization parameters. Click the “Go!” button to perform analysis and display the plot in the right. The analyzed data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.12: The steps of module “TCGA: Molecular Profile Cox Analysis” 10.1.4 Dimension Reduction 10.1.4.1 TCGA: Dimension Reduction Distribution Perform molecular dimension reduction analysis in one TCGA cancer. Based on vis_dim_dist() function. Select multiple molecules and click “Cache data” to load the molecular data. There are 3 ways to select multiple molecules. “Select”: One-by-one selection; “Pathway”: batch selection under one pathway; “File”: Upload of identifier file. Select one cancer (or more cancers) and grouping one phenotype. Notably, user can also upload custom group. Modify analysis and visualization parameters. Three DR methods including PCA, UMAP and tSNE are supported. Click the “Go!” button to perform analysis and display the plot in the right. The analyzed data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.13: The steps of module “TCGA: Dimension Reduction Distribution” 10.2 PCAWG Table 10.2: Custom modules for PCAWG analysis Database Type Module PCAWG Comparison PCAWG: Molecular Profile Distribution Across Cancer Types (Tumor VS Normal) PCAWG Correlation PCAWG: Molecule-Molecule Correlation PCAWG Survival PCAWG: Molecular Profile Log-rank Analysis PCAWG Survival PCAWG: Molecular Profile Cox Analysis 10.2.1 Comparison analysis 10.2.1.1 PCAWG: Molecular Profile Distribution Across Cancer Types (Tumor VS Normal) Compare molecular values between tumor and normal samples of PCAWG projects. Based on vis_pcawg_dist() function. Select one molecular type and identifier. Adjust the visualization parameters. Click the “Go!” button to perform analysis and display the plot in the right. The raw data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.14: The steps of module “PCAWG: Molecular Profile Distribution Across Cancer Types (Tumor VS Normal)” 10.2.2 Correlation analysis 10.2.2.1 PCAWG: Molecule-Molecule Correlation Compute and visualize the correlation between two molecules based on PCAWG database. Based on vis_pcawg_gene_cor() function. Select two molecules. They can come from different datasets. Adjust the visualization and analysis parameters. “Use All Cancer Types” means whether directly use tumor samples from all PCAWG projects. Click the “Go!” button to perform analysis and display the plot in the right. The raw data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.15: The steps of module “PCAWG: Molecule-Molecule Correlation” 10.2.3 Survival analysis Only OS endpoint. 10.2.3.1 PCAWG: Molecular Profile Log-rank Analysis Perform one molecular Log-rank survival analysis in one TCGA cancer. Select one PCAWG project and one molecule. Filter samples according to Age/Sex. Select molecular grouping mode. Click the “Go!” button to perform analysis and display the plot in the right. The raw data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.16: The steps of module “PCAWG: Molecular Profile Log-rank Analysis” 10.2.3.2 PCAWG: Molecular Profile Cox Analysis Perform one molecular Log-rank survival analysis in All PCAWG projects. Based on vis_pcawg_unicox_tree() function. Select one molecule. Select molecular grouping threshold. Modify visualization parameters. Click the “Go!” button to perform analysis and display the plot in the right. The analyzed data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.17: The steps of module “PCAWG: Molecular Profile Log-rank Analysis” 10.3 CCLE Table 10.3: Custom modules for CCLE analysis Database Type Module CCLE Comparison CCLE: Molecular Profile Distribution Across Cancer Primary Sites CCLE Correlation CCLE: Molecule-Molecule Correlation 10.3.1 Comparison analysis 10.3.1.1 CCLE: Molecular Profile Distribution Across Cancer Primary Sites Compare molecular values of cancer cell lines from different primary site. Based on vis_ccle_tpm() function. Select one molecular type and identifier. Click the “Go!” button to perform analysis and display the plot in the right. The raw data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.18: The steps of module “CCLE: Molecular Profile Distribution Across Cancer Primary Sites” 10.3.2 Correlation analysis 10.3.2.1 CCLE: Molecule-Molecule Correlation Compute and visualize the correlation between two molecules based on CCLE database. Based on vis_ccle_gene_cor() function. Select two molecules. They can come from different datasets. Adjust the visualization and analysis parameters. “Use All Primary Sites” means whether directly use cancer cell lines. Click the “Go!” button to perform analysis and display the plot in the right. The raw data will be also showed in right-bottom area and can be saved as CSV file. Download the plot with size and format options. Figure 10.19: The steps of module “CCLE: Molecule-Molecule Correlation” "],["personalized-tpc-pipelines-upstream.html", "Chapter 11 Personalized TPC pipelines-Upstream 11.1 Extensive tumor data 11.2 Sample processing 11.3 Data fetch", " Chapter 11 Personalized TPC pipelines-Upstream 11.1 Extensive tumor data 11.1.1 Compiling types of identifiers For TCGA samples, there are 5 main data types and 23 subtypes (except for Custom metadata). Figure 11.1: Hierarchical types of TCGA Identifiers For PCAWG samples, there are 5 main data types and 17 subtypes (except for Custom metadata). For CCLE samples, there are 3 main data types and 6 subtypes (except for Custom metadata). Figure 11.2: Hierarchical types of PCAWG and CCLE Identifiers 11.1.2 Reference of full identifiers In the “Help→ID query” page, all specific identifiers for “Molecular profile”, “Tumor index”, “Immune Infiltration”, “Pathway activity”, “Phenotype data” types of TPC samples are compiling. For example, valid identifiers under the TCGA mRNA Expression subtype are shown in the figure. Figure 11.3: TPC Identifiers Query Page 11.1.3 User-defined identifiers 11.1.3.1 Upload of random identifiers Users are enabled to upload random identifiers for joint analysis in the “Upload metadata” part of S1 step. The example file can be downloaded via the right button to see the format requirements. .CSV file; The first column names “Sample” with sample ids. (e.g. “TCGA-OR-A5J1-01” for TCGA samples); Note only the intersected samples between this column and all TPC samples are considered; The other columns are random identifiers with continuous or categorical values. Upon successful identifiers upload, they will be added into the “Custom metadata” subtype of “Phenotype data”. Figure 11.4: Upload of random identifiers 11.1.3.2 Design of custom signature Users can also design custom signature score based on user-defined molecular formula in the “Add signature” part of S1 step. Upon successful signature design and score calculation, they will also be added into the “Custom metadata” subtype of “Phenotype data”. Figure 11.5: Design of custom signature As shown in the figure, the signature can be set as following steps after clicking Edit button. Firstly, modify the name and select the molecular type; Then, design the molecular formula comprised of multiple molecules with respective coefficients; The coefficient of each molecule is divided into two parts (Directions and Absolute Coef). The “Del” button will cancel the last set molecule and the “Reset” button will undo all set molecules. The real-time formula is shown in the bottom. Finally, click the “Query data” button to calculate the signature scores and then click the right button to add the signature into the “Custom metadata” subtype of “Phenotype data”. In addition, user can obtain the score locally via the bottom button. Figure 11.6: 3 steps of signature design 11.2 Sample processing Figure 11.7: Sample filtering and grouping modules 11.2.1 Sample filtering After selecting one tumor, the all samples will be selected by default. Here, we provide two methods to obtain specific subpopulation in the “Filter samples” part of S1 step. Figure 11.8: Sample filtering module 11.2.1.1 Quick filter Users can directly make quick selections based on the code(pathological ) types of samples. Based on the 14th to 15th characters of the TCGA sample ID (e.g., TCGA-19-1787-01), samples can be categorized into different group types. The common code types involved in UCSCXenaShiny analysis are shown in the following table. Code Definition Short Letter Code 01 Primary Solid Tumor TP 02 Recurrent Solid Tumor TR 03 Primary Blood Derived Cancer - Peripheral Blood TB 05 Additional - New Primary TAP 06 Metastatic TM 07 Additional Metastatic TAM 11 Solid Tissue Normal NT For PCAWG database, you can perform similar operation to quickly select tumor or normal samples. For CCLE database, there is no quick filter. 11.2.1.2 Exact filter Through this module, users are enabled to perform personalized sample filtering. This followings are operational steps: Set the candidate conditions from comprehensive identifiers. Each addition will rename the selected identifier as “Condition_X”. When selecting molecular identifier as condition, it may take some time to download from the USCS Xena, depending on the network. For TPC samples, some basic clinical variables have been selected into the candidate pool. For TCGA samples, they include Age, Code, Gender, Stage_ajcc, Stage_clinical, Grade. Get an overview of the distribution of each candidate condition for clear filtering . For continuous variables, the mean and the distribution of multiple percentiles are display. For categorical variables, the frequency of each category is display. Perform filtering operation based on one or multiple conditions from the above candidate list. Total 6 operators are devised for versatile filtering give the type of each condition. For categorical variable, “+” and “-” are used for retain or discard specific categories of samples. For continuous variable, “&gt;” and “&lt;” are used to set absolute cutoff, while “%&gt;” and “%&lt;” are used to set percentile cutoff. Figure 11.9: 3 steps of sample filtering Tips: If the percentile cutoff is involved, the results may vary based on the order of filtering, as illustrated in the example above figure. The first instance: Samples with the top 50% high expression of TP53 in female samples. → 23 samples The second instance: Females from the top 50% of samples with high TP53 expression. → 28 samples 11.2.2 Sample grouping For binary comparison or survival analysis, it is necessary to divide the samples into two groups based on one specific condition. Here, we also provide a personalized grouping module to flexibly set two ranges of sample populations. Generally, it have two steps: Select one condition and observe its distribution. Similar to the filtering module, it can bring a clear pre-knowledge by observing the distribution of one continuous or categorical condition. Set two non-overlapping sample ranges to group. For categorical variable, assign one or more classifications for both groups (Left figure) For continuous variable, set the minimum and max thresholds for both group. By default, the first group (Group1) has lower value with left close and right open range, e.g. [0, 1). If its left range is blank, it represent the minimum value of the condition. And, the second group (Group2) has larger value with left close and right close range, e.g. [0, 1]. If its right range is blank, it represent the maximum value of the condition. The thresholds can be percentile values (Middle figure) or absolute values (Right figure) depending on purposes. Figure 11.10: Sample grouping module Tips: By default, the Group1 has the prior order during analysis and visualization. You can click the switch “Whether reverse levels” to change the order. 11.3 Data fetch After sample selection and processing, it usually need to fetch data for downstream analysis. 11.3.1 Single data Most of time, we just need to select one identifier and fetch its values. According to the hierarchical organization (Data type → Data subtype → Identifier), select one interesting identifier and then click the “Query button” to fetch data. It’s worth noting that, for Molecular profile data types, it may take some time to download from the UCSC Xena, depending on the network. Figure 11.11: Fetch single data 11.3.2 Multiple data For batch analysis, we can select multiple identifiers based on one of three ways. In the first way (Left figure), user can select batch identifiers of one specific subtype one by one; In the second way (Middle figure), user can select all identifiers of one specific subtype. Notably, for some molecular types with vast identifiers, all the identifiers (gene/transcript) belong to one MSigDB signature can be selected. These molecular types are “mRNA Expression”, “DNA Methylation”, “Mutation status”, “Copy Number Variation”, “Transcript Expression”. The MSigDB gene signatures are obtained via msigdbr package, which can be 9 main categories. Two links are available for detailed information of selected signature and MSigDB database. In the third way (Right figure), user can directly upload an identifier file with following requirements: TXT format; One column without name; Only the valid identifiers that overlapped with the selected data subtype are retained Figure 11.12: Fetch multiple data Category Notes Subcategory H hallmark gene sets / C1 positional gene sets / C2 curated gene sets CGP, CP, CP:BIOCARTA, CP:KEGG, CP:PID, CP:REACTOME, CP:WIKIPATHWAYS C3 regulatory target gene sets MIR:MIRDB, MIR:MIR_Legacy, TFT:GTRD, TFT:TFT_Legacy C4 computational gene sets CGN, CM C5 ontology gene sets GO:BP, GO:CC, GO:MF, HPO C6 oncogenic signature gene sets / C7 immunologic signature gene sets IMMUNESIGDB, VAX C8 cell type signature gene sets / "],["personalized-tpc-pipelines-downstream.html", "Chapter 12 Personalized TPC pipelines-Downstream 12.1 General steps 12.2 Correlation analysis 12.3 Comparison analysis 12.4 Survival analysis", " Chapter 12 Personalized TPC pipelines-Downstream 12.1 General steps S1: Preset — Set personalized samples and tumor data with following general steps. “Modify datasets”: View the dataset sources for each molecular type. When there are alternative datasets for the same molecular type, users can switch a suitable one based on purpose. “Choose cancer”: Choose one cancer type for downstream association analysis. “Filter samples”: Upon the selection of one tumor, further refine the samples based on tissue codes or personalized filtering module. “Upload metadata”: Upload user-defined tumor data for joint analysis. “Add signature”: Design custom molecular signature for joint analysis. S2: Get data — Select and fetch identifier values; set grouping information. S3: Analyze &amp; Visualize — Modify diverse parameters; perform analysis; download results. “Set analyzation parameters”: Select different statistical methods “Set visualization parameters”: Adjust plot color, title text, etc. “Download results”: Download three types of results, including raw data, detailed statistical results and plot results. (Note: No plot for batch-screen mode). Notes: We will introduce various analysis scenarios of TPC using TCGA as example. 12.2 Correlation analysis Figure 12.1: 3 modes of correlation analysis 12.2.1 Individual Mode Perform the correlation analysis between any two identifiers of samples from one tumor. The following is a simple example. (The steps not mentioned in above figure imply default operations.) S1: Preset “S1.2 Choose cancer”: choose the CHOL (Cholangiocarcinoma) cancer type “S1.3 Filter samples”: choose the primary tumor samples via the quick filter. S2: Get data “S2.1 Get data for X-axis”: Molecular profile→mRNA Expression→TP53 “S2.2 Get data for Y-axis”: Infiltration→CIBERSORT→ Monocyte S3: Analyze &amp; Visualize “S3.1 Set analysis parameters”: Spearman “S3.2 Set visualization parameters”: Adjust the main title name. Figure 12.2: Example of correlation analysis in individual mode 12.2.2 Pan-cancer Mode Perform the correlation analysis between any two identifiers of samples from multiple tumors. The following is a simple example. (The steps not mentioned in above figure imply default operations.) S1: Preset “S1.1 Modify datasets”: Select the Norm_Count dataset for mRNA Expression dataset. “S1.2 Choose cancer”: choose all TCGA cancer types. “S1.3 Filter samples”: choose the non-normal samples via the quick filter. S2: Get data “S2.1 Get data for X-axis”: Molecular profile→mRNA Expression→HDAC1 “S2.2 Get data for Y-axis”: Molecular profile→mRNA Expression→APOE S3: Analyze &amp; Visualize “S3.1 Set analysis parameters”: Pearson “S3.2 Set visualization parameters”: Adjust the names of main title and axis title. Figure 12.3: Example of correlation analysis in pan-cancer mode 12.2.3 Batch Screen Mode Perform the correlation analysis between multiple identifiers and one identifier of samples from one tumor. The following is a simple example. (The steps not mentioned in above figure imply default operations.) S1: Preset “S1.2 Choose cancer”: choose the CHOL (Cholangiocarcinoma) cancer type “S1.3 Filter samples”: choose the primary tumor samples via the quick filter. S2: Get data “S2.1 Get batch data for X-axis”: Molecular profile→mRNA Expression→ genes of HALLMARK_APOPTOSIS pathways “S2.2 Get data for Y-axis”: Immune Infiltration→CIBERSORT→ Monocyte S3: Analyze “S3.1 Set analysis parameters”: Spearman Figure 12.4: Example of correlation analysis in batch screen mode 12.3 Comparison analysis Figure 12.5: 3 modes of comparison analysis 12.3.1 Individual Mode Perform the comparison analysis of one identifier between two groups of samples from one tumor. The following is a simple example. (The steps not mentioned in above figure imply default operations.) S1: Preset “S1.2 Choose cancer”: choose the BRCA (Breast invasive carcinoma) cancer type “S1.3 Filter samples”: choose the non-normal samples via the quick filter. S2: Get data “S2.1 Divide 2 groups by one condition”: Group1→Primary tumor samples; Group2→Metastatic tumor samples “S2.2 Get data for comparison”: Molecular profile→mRNA Expression→POSTN S3: Analyze &amp; Visualize “S3.1 Set analysis parameters”: Wilcoxon test “S3.2 Set visualization parameters”: Remove x-axis title. Figure 12.6: Example of comparison analysis in individual mode 12.3.2 Pan-cancer Mode Perform the comparison analysis of one identifier between two groups of samples from multiple tumors. The following is a simple example. (The steps not mentioned in above figure imply default operations.) S1: Preset “S1.2 Choose cancer”: choose the all TCGA cancer types. “S1.3 Filter samples”: choose the primary tumor samples via the quick filter. Further choose samples with age above 60 via the exact filter. S2: Get data “S2.1 Divide 2 groups by one condition”: Group1→ gene PTEN mutation; Group2→ gene PTEN wild-type. “S2.2 Get data for comparison”: Tumor index → Tumor Stemness →RNAss S3: Analyze &amp; Visualize “S3.1 Set analysis parameters”: t-test “S3.2 Set visualization parameters”: adjust x-axis title. Figure 12.7: Example of comparison analysis in pan-cancer mode 12.3.3 Batch Screen Mode Perform the comparison analysis of multiple identifier between two groups of samples from one tumor. The following is a simple example. (The steps not mentioned in above figure imply default operations.) S1: Preset “S1.2 Choose cancer”: choose the BRCA (Breast invasive carcinoma) cancer type “S1.3 Filter samples”: choose the non-normal samples via the quick filter. S2: Get data “S2.1 Divide 2 groups by one condition”: Group1→Primary tumor samples; Group2→Metastatic tumor samples “S2.2 Get data for comparison”: Immune Infiltration→XCELL→ Monocyte S3: Analyze “S3.1 Set analysis parameters”: Wilcoxon test Figure 12.8: Example of comparison analysis in batch screen mode 12.4 Survival analysis By default, both log-rank and cox regression survival analysis are performed for two groups of samples divided according to one condition. Here, we devised a switch “Whether use initial data before grouping?” at S3.1 steps with following function: If its status is off , the above default analysis will performed; If its status is on and the grouping condition is continuous: For log-rank test, it will search the optimal cutoff with most significant survival difference; For Cox regression, it will directly build the cox model based on the continuous variable. Figure 12.9: 3 modes of survival analysis 12.4.1 Individual Mode S1: Preset “S1.1 Modify datasets”: Select the 27K Methylation datasets; Select the cg15206330 site to represent TP53 methylation “S1.2 Choose cancer”: choose the BRCA (Breast invasive carcinoma) cancer type “S1.3 Filter samples”: choose the non-normal samples via the quick filter. S2: Get data “S2.1 Select survival endpoint”: Select the OS event “S2.2 Divide 2 groups by one condition”: Group1: TP53 methylation higher 50%, Group2: TP53 methylation lower 50% S3: Analyze &amp; Visualize “S3.1 Set analysis parameters”: Log-rank text “S3.2 Set visualization parameters”: Modify color; Set confidence interval. Figure 12.10: Example of survival analysis in individual mode 12.4.2 Pan-cancer Mode S1: Preset “S1.2 Choose cancer”: choose the BRCA cancer type “S1.3 Filter samples”: choose the non-normal samples via the quick filter. S2: Get data “S2.1 Select survival endpoint”: Select the OS event “S2.2 Divide 2 groups by one condition”: Group1: Signature value higher 10%, Group2: Signature value lower 10% S3: Analyze &amp; Visualize “S3.1 Set analysis parameters”: Univariate Cox regression; Use the initial data. “S3.2 Set visualization parameters”: Add main title. Figure 12.11: Example of survival analysis in pan-cancer mode 12.4.3 Batch Screen Mode S1: Preset “S1.2 Choose cancer”: choose the all TCGA cancer types “S1.3 Filter samples”: choose the primary tumor samples via the quick filter. “S1.5 Add signature”: Design a molecular signature and add to custom metadata. S2: Get data “S2.1 Select survival endpoint”: Select the PFI event “S2.2 Divide 2 groups by one condition”: Pathway activity→HALLMARK pathways→Group1: score higher 50%, Group2: score lower 50% S3: Analyze “S3.1 Set analysis parameters”: Log-rank test Figure 12.12: Example of survival analysis in batch screen mode "],["download-modules.html", "Chapter 13 Download modules 13.1 Download TPC datasets 13.2 Download UCSC Xena datasets", " Chapter 13 Download modules Although users can download the full datasets of UCSC Xena in the repository Here, two download modules are designed for the precise acquisition of raw data from TCGA/PCAWG/CCLE analysis and UCSC Xena repository datasets. Actually the molecular data of TPC analysis is also curated from UCSC Xena in previous chapters. The main differences of the two modules are described below. If you want to quickly query and obtain omics values of TPC samples, the download module 1 is more suitable. In addition, non-omics annotation data of TPC is also available (e.g. tumor immune infiltration estimation). If you want to search one specific UCSC Xena dataset, especially for other hubs (e.g. TCGA GDC), the download module is more suitable. Figure 13.1: Two custom download modules 13.1 Download TPC datasets There are two parts for omics and non-omics data, respectively. 13.1.1 Omics molecular data fetch Select one database and set the candidate datasets (refer chapter 11); Select further samples through the quick or exact filters (refer chapter 12); Select one specific molecular type and its multiple identifiers in three ways; Click the “Query” button to fetch the eligible data and display in the right panel; Download the queried data into local CSV or RDA file. Figure 13.2: The steps of TPC omics molecular data fetch 13.1.2 Non-omics annotation data fetch For each of TPC databases, there are various non-omics annotation data for extensive molecular analysis; In the most right panel, users can easily download one specific data via corresponding buttons; Figure 13.3: TPC non-omics annotation data 13.2 Download UCSC Xena datasets Select one data hub in UCSC Xena; Select one of candidate datasets by limiting the data format type and profile type; Load all available identifiers of the selected dataset. The Primary ID indicates the row names of dataset and the ProbeMap ID is more usable. For instance, among most mRNA dataset, their Primary IDs are usually Ensembl names and ProbeMap IDs are Symbol names; Select multiple identifiers or directly upload an id file; Click the “Query” button to fetch the eligible data and display in the right panel; Download the queried data into local CSV or RDA file. Figure 13.4: The steps of UCSC Xena dataset fetch "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
